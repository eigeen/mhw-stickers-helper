use num_derive::FromPrimitive;

use super::TexFormat;

#[repr(i32)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, FromPrimitive)]
pub enum DxgiFormat {
    Unknown,
    R32G32B32A32Typeless,
    R32G32B32A32Float,
    R32G32B32A32Uint,
    R32G32B32A32Sint,
    R32G32B32Typeless,
    R32G32B32Float,
    R32G32B32Uint,
    R32G32B32Sint,
    R16G16B16A16Typeless,
    R16G16B16A16Float,
    R16G16B16A16Unorm,
    R16G16B16A16Uint,
    R16G16B16A16Snorm,
    R16G16B16A16Sint,
    R32G32Typeless,
    R32G32Float,
    R32G32Uint,
    R32G32Sint,
    R32G8X24Typeless,
    D32FloatS8X24Uint,
    R32FloatX8X24Typeless,
    X32TypelessG8X24Uint,
    R10G10B10A2Typeless,
    R10G10B10A2Unorm,
    R10G10B10A2Uint,
    R11G11B10Float,
    R8G8B8A8Typeless,
    R8G8B8A8Unorm,
    R8G8B8A8UnormSrgb,
    R8G8B8A8Uint,
    R8G8B8A8Snorm,
    R8G8B8A8Sint,
    R16G16Typeless,
    R16G16Float,
    R16G16Unorm,
    R16G16Uint,
    R16G16Snorm,
    R16G16Sint,
    R32Typeless,
    D32Float,
    R32Float,
    R32Uint,
    R32Sint,
    R24G8Typeless,
    D24UnormS8Uint,
    R24UnormX8Typeless,
    X24TypelessG8Uint,
    R8G8Typeless,
    R8G8Unorm,
    R8G8Uint,
    R8G8Snorm,
    R8G8Sint,
    R16Typeless,
    R16Float,
    D16Unorm,
    R16Unorm,
    R16Uint,
    R16Snorm,
    R16Sint,
    R8Typeless,
    R8Unorm,
    R8Uint,
    R8Snorm,
    R8Sint,
    A8Unorm,
    R1Unorm,
    R9G9B9E5Sharedexp,
    R8G8B8G8Unorm,
    G8R8G8B8Unorm,
    Bc1Typeless,
    Bc1Unorm,
    Bc1UnormSrgb,
    Bc2Typeless,
    Bc2Unorm,
    Bc2UnormSrgb,
    Bc3Typeless,
    Bc3Unorm,
    Bc3UnormSrgb,
    Bc4Typeless,
    Bc4Unorm,
    Bc4Snorm,
    Bc5Typeless,
    Bc5Unorm,
    Bc5Snorm,
    B5G6R5Unorm,
    B5G5R5A1Unorm,
    B8G8R8A8Unorm,
    B8G8R8X8Unorm,
    R10G10B10XrBiasA2Unorm,
    B8G8R8A8Typeless,
    B8G8R8A8UnormSrgb,
    B8G8R8X8Typeless,
    B8G8R8X8UnormSrgb,
    Bc6hTypeless,
    Bc6hUf16,
    Bc6hSf16,
    Bc7Typeless,
    Bc7Unorm,
    Bc7UnormSrgb,
    Ayuv,
    Y410,
    Y416,
    Nv12,
    P010,
    P016,
    Format420Opaque,
    Yuy2,
    Y210,
    Y216,
    Nv11,
    Ai44,
    Ia44,
    P8,
    A8P8,
    B4G4R4A4Unorm,
    P208,
    V208,
    V408,
    SamplerFeedbackMinMipOpaque,
    SamplerFeedbackMipRegionUsedOpaque,
    ForceUint,
}

impl TryFrom<TexFormat> for DxgiFormat {
    type Error = crate::error::Error;

    fn try_from(value: TexFormat) -> Result<Self, Self::Error> {
        match value {
            TexFormat::DxgiFormatR8G8B8A8Unorm => Ok(DxgiFormat::R8G8B8A8Unorm),
            TexFormat::DxgiFormatR8G8B8A8UnormSRGB => Ok(DxgiFormat::R8G8B8A8UnormSrgb),
            TexFormat::DxgiFormatR8G8Unorm => Ok(DxgiFormat::R8G8Unorm),
            TexFormat::DxgiFormatBc1Unorm => Ok(DxgiFormat::Bc1Unorm),
            TexFormat::DxgiFormatBc1UnormSRGB => Ok(DxgiFormat::Bc1UnormSrgb),
            TexFormat::DxgiFormatBc4Unorm => Ok(DxgiFormat::Bc4Unorm),
            TexFormat::DxgiFormatBc5Unorm => Ok(DxgiFormat::Bc5Unorm),
            TexFormat::DxgiFormatBc6hUf16 => Ok(DxgiFormat::Bc6hUf16),
            TexFormat::DxgiFormatBc7Unorm => Ok(DxgiFormat::Bc7Unorm),
            TexFormat::DxgiFormatBc7UnormSRGB => Ok(DxgiFormat::Bc7UnormSrgb),
            TexFormat::DxgiFormatUnknown => Err(crate::error::Error::UnknownTexFormat),
        }
    }
}
